module 'lc_tests' ['all_tests'/0,
		   'cps_cons'/3,
		   'function_param_lc'/2,
		   'handle_gc'/4,
		   'handle_gc_evts'/0,
		   'handle_gc_evts'/1,
		   'int_arg'/0,
		   'intermediary_list'/1,
		   'intermediary_list2'/1,
		   'intermediary_list3'/1,
		   'lazy_cp_seq'/2,
		   'lazy_cp_seq'/3,
		   'lazy_foldr'/3,
		   'lazy_seq'/2,
		   'list_arg'/0,
		   'make_n'/2,
		   'module_info'/0,
		   'module_info'/1,
		   'nested_lc_gen'/1,
		   'nested_lc_gen_opt'/1,
		   'nested_lc_gen_opt_helper'/2,
		   'pen'/1,
		   'pen2'/1,
		   'pen2_dumb'/1,
		   'pen2_dumb_helper'/4,
		   'pen2_dumb_opt'/1,
		   'pen2_dumb_opt_helper'/5,
		   'pen2_foldl'/1,
		   'pen2_foldr'/1,
		   'pen2_lazy'/1,
		   'pen2_lazy_cps'/1,
		   'pen2_listsfuns'/1,
		   'pen2_mr'/1,
		   'pyth'/1,
		   'pyth1'/1,
		   'pyth2'/0,
		   'pyth3'/1,
		   'random'/1,
		   'random_bin'/1,
		   'random_test_records'/2,
		   'record_arg'/0,
		   'record_extract'/1,
		   'rng'/2,
		   'run_tests'/1,
		   'run_tests'/3,
		   'ses'/1,
		   'single_filter'/1,
		   'sorted_gen'/1,
		   'ss'/1,
		   'stats'/0,
		   'test'/3,
		   'unused'/0]
    attributes []
'random'/1 =
    %% Line 14
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 15
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor2> =
		%% Line 15
		call 'random':'uniform'
		    (_cor1)
	    in  %% Line 15
		call 'lists':'nth'
		    (_cor2, _cor0)
'random_bin'/1 =
    %% Line 17
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 18
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[_cor9|_cor2]> when 'true' ->
				let <_cor5> =
				    call 'random':'uniform'
					(255)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor3> =
		      call 'lists':'seq'
			  (1, _cor0)
		  in  apply 'lc$^0'/1
			  (_cor3)
	      -| ['list_comprehension'] )
	in  %% Line 18
	    call 'erlang':'list_to_binary'
		(_cor7)
'rng'/2 =
    %% Line 20
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_X_N> when 'true' ->
	      []
	  %% Line 21
	  <Length,N> when 'true' ->
	      let <_cor2> =
		  %% Line 22
		  call 'random':'uniform'
		      (N)
	      in  let <_cor3> =
		      %% Line 22
		      call 'erlang':'-'
			  (Length, 1)
		  in  let <_cor4> =
			  %% Line 22
			  apply 'rng'/2
			      (_cor3, N)
		      in  %% Line 22
			  [_cor2|_cor4]
	end
'random_test_records'/2 =
    %% Line 24
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_X_N> when 'true' ->
	      []
	  %% Line 25
	  <Length,N> when 'true' ->
	      let <_cor3> =
		  %% Line 26
		  call 'random':'uniform'
		      (N)
	      in  let <_cor2> =
		      %% Line 26
		      call 'random':'uniform'
			  (N)
		  in  let <_cor4> =
			  %% Line 27
			  call 'erlang':'-'
			      (Length, 1)
		      in  let <_cor5> =
			      %% Line 27
			      apply 'random_test_records'/2
				  (_cor4, N)
			  in  %% Line 26
			      [{'test_record',_cor3,_cor2}|_cor5]
	end
'lazy_seq'/2 =
    %% Line 31
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <M,N>
	      when call 'erlang':'>'
		    (M,
		     N) ->
	      []
	  %% Line 32
	  <M,N> when 'true' ->
	      let <_cor3> =
		  ( fun () ->
			let <_cor2> =
			    call 'erlang':'+'
				(M, 1)
			in  apply 'lazy_seq'/2
				(_cor2, N)
		    -| [{'id',{0,0,'-lazy_seq/2-fun-0-'}}] )
	      in  [M|_cor3]
	end
'lazy_foldr'/3 =
    %% Line 34
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,Acc,[Hd|Tl]> when 'true' ->
	      let <_cor3> =
		  %% Line 35
		  call 'erlang':'apply'
		      (Tl, [])
	      in  let <_cor4> =
		      %% Line 35
		      apply 'lazy_foldr'/3
			  (F, Acc, _cor3)
		  in  %% Line 35
		      apply F
			  (Hd, _cor4)
	  %% Line 36
	  <_X_F,Acc,[]> when 'true' ->
	      Acc
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'lazy_foldr',3}}] )
	    -| ['compiler_generated'] )
	end
'cps_cons'/3 =
    %% Line 39
    fun (_cor2,_cor1,_cor0) ->
	%% Line 40
	apply _cor0
	    ([_cor2|_cor1])
'lazy_cp_seq'/2 =
    %% Line 42
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 43
	    ( fun (_cor2) ->
		  _cor2
	      -| [{'id',{0,0,'-lazy_cp_seq/2-fun-0-'}}] )
	in  %% Line 43
	    apply 'lazy_cp_seq'/3
		(_cor1, _cor0, _cor4)
'lazy_cp_seq'/3 =
    %% Line 44
    fun (_cor2,_cor1,_cor0) ->
	%% Line 45
	case <> of
	  <>
	      when call 'erlang':'<'
		    (_cor1,
		     _cor2) ->
	      []
	  %% Line 46
	  <> when 'true' ->
	      let <_cor7> =
		  ( fun () ->
			let <_cor6> =
			    call 'erlang':'+'
				(_cor2, 1)
			in  let <_cor5> =
				( fun (_cor3) ->
				      apply 'cps_cons'/3
					  (_cor2, _cor3, _cor0)
				  -| [{'id',{0,0,'-lazy_cp_seq/3-fun-0-'}}] )
			    in  apply 'lazy_cp_seq'/3
				    (_cor6, _cor1, _cor5)
		    -| [{'id',{0,0,'-lazy_cp_seq/3-fun-1-'}}] )
	      in  [_cor2|_cor7]
	end
'stats'/0 =
    %% Line 52
    fun () ->
	['memory'|['heap_size'|['total_heap_size'|['stack_size'|['garbage_collection']]]]]
'test'/3 =
    %% Line 54
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Fn,Args>
	      when call 'erlang':'is_list'
		    (Args) ->
	      let <Me> =
		  %% Line 55
		  call 'erlang':'self'
		      ()
	      in  let <_cor11> =
		      %% Line 58
		      ( fun () ->
			    let <_cor5> =
				%% Line 59
				call 'erlang':'self'
				    ()
			    in  let <_cor4> =
				    %% Line 59
				    apply 'stats'/0
					()
				in  let <Before> =
					%% Line 59
					call 'erlang':'process_info'
					    (_cor5, _cor4)
				    in  let <Res> =
					    %% Line 60
					    call 'erlang':'apply'
						(Fn, Args)
					in  let <_cor9> =
						%% Line 62
						call 'erlang':'self'
						    ()
					    in  let <_cor8> =
						    %% Line 62
						    apply 'stats'/0
							()
						in  let <After> =
							%% Line 62
							call 'erlang':'process_info'
							    (_cor9, _cor8)
						    in  %% Line 63
							call 'erlang':'!'
							    (Me, {Before,After,Res})
			-| [{'id',{0,0,'-test/3-fun-0-'}}] )
		  in  let <Pid> =
			  %% Line 57
			  call 'erlang':'spawn'
			      (_cor11)
		      in  do  %% Line 65
			      call 'erlang':'!'
				  (Pid, Me)
			      %% Line 66
			      receive
				%% Line 67
				<{B,A,R}> when 'true' ->
				    {Name,Pid,{B,A},R}
			      after 'infinity' ->
				'true'
	  %% Line 69
	  <Name,Fn,Arg> when 'true' ->
	      %% Line 70
	      apply 'test'/3
		  (Name, Fn, [Arg|[]])
	end
'run_tests'/3 =
    %% Line 72
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Pid,Acc> when 'true' ->
	      do  %% Line 73
		  call 'timer':'sleep'
		      (100)
		  let <_cor3> =
		      %% Line 74
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 74
			  call 'erlang':'!'
			      (Pid, _cor3)
			  %% Line 75
			  receive
			    %% Line 76
			    <Map> when 'true' ->
				( letrec
				      'lc$^0'/1 =
					  fun (_cor6) ->
					      case _cor6 of
						<[%% Line 77
						  {Name,Proc,{Before,After},Result}|_cor5]> when 'true' ->
						    let <_cor7> =
							call 'maps':'get'
							    (Proc, Map, 0)
						    in  let <_cor8> =
							    %% Line 77
							    apply 'lc$^0'/1
								(_cor5)
							in  ( [{Name,_cor7,{Before,After},Result}|_cor8]
							      -| ['compiler_generated'] )
						( <[_cor4|_cor5]> when 'true' ->
						      %% Line 77
						      apply 'lc$^0'/1
							  (_cor5)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor6> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor6})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (%% Line 77
					   Acc)
				  -| ['list_comprehension'] )
			  after 'infinity' ->
			    'true'
	  %% Line 79
	  <[{Name,Fn,Args}|Tail],Pid,Acc> when 'true' ->
	      let <Res> =
		  %% Line 80
		  apply 'test'/3
		      (Name, Fn, Args)
	      in  %% Line 81
		  apply 'run_tests'/3
		      (Tail, Pid, [Res|Acc])
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'run_tests',3}}] )
	    -| ['compiler_generated'] )
	end
'run_tests'/1 =
    %% Line 83
    fun (_cor0) ->
	case _cor0 of
	  <Lst>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 84
		  ( fun () ->
			apply 'handle_gc_evts'/0
			    ()
		    -| [{'id',{0,0,'-run_tests/1-fun-0-'}}] )
	      in  let <Pid> =
		      %% Line 84
		      call 'erlang':'spawn'
			  (_cor1)
		  in  do  %% Line 85
			  call 'timer':'sleep'
			      (100)
			  %% Line 86
			  apply 'run_tests'/3
			      (Lst, Pid, [])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'run_tests',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_gc_evts'/0 =
    %% Line 88
    fun () ->
	do  %% Line 89
	    call 'erlang':'trace'
		('new', 'true', ['garbage_collection'])
	    let <_cor0> =
		%% Line 90
		call 'maps':'new'
		    ()
	    in  %% Line 90
		apply 'handle_gc_evts'/1
		    (_cor0)
'handle_gc_evts'/1 =
    %% Line 91
    fun (_cor0) ->
	%% Line 92
	receive
	  %% Line 93
	  <{'trace',Pid,Type,Details}> when 'true' ->
	      let <_cor1> =
		  apply 'handle_gc'/4
		      (_cor0, Pid, Type, Details)
	      in  apply 'handle_gc_evts'/1
		      (_cor1)
	  %% Line 94
	  <Pid> when 'true' ->
	      do  %% Line 95
		  call 'erlang':'trace'
		      ('new', 'false', ['garbage_collection'])
		  %% Line 96
		  call 'erlang':'!'
		      (Pid, _cor0)
	after 'infinity' ->
	  'true'
'handle_gc'/4 =
    %% Line 100
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <HeapSize> =
	    %% Line 101
	    call 'proplists':'get_value'
		('heap_size', _cor0)
	in  %% Line 102
	    case call 'maps':'get'
		     (_cor2, _cor3, 'undefined') of
	      %% Line 103
	      <'undefined'> when 'true' ->
		  call 'maps':'put'
		      (_cor2, HeapSize, _cor3)
	      %% Line 104
	      <Frees> when 'true' ->
		  case _cor1 of
		    %% Line 105
		    <'gc_start'> when 'true' ->
			let <_cor5> =
			    call 'erlang':'+'
				(Frees, HeapSize)
			in  call 'maps':'put'
				(_cor2, _cor5, _cor3)
		    %% Line 106
		    <'gc_end'> when 'true' ->
			let <_cor6> =
			    call 'erlang':'-'
				(Frees, HeapSize)
			in  call 'maps':'put'
				(_cor2, _cor6, _cor3)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	    end
'int_arg'/0 =
    %% Line 113
    fun () ->
	%% Line 114
	50
'list_arg'/0 =
    %% Line 115
    fun () ->
	%% Line 116
	apply 'rng'/2
	    (50, 50)
'record_arg'/0 =
    %% Line 117
    fun () ->
	%% Line 118
	apply 'random_test_records'/2
	    (50, 50)
'all_tests'/0 =
    %% Line 120
    fun () ->
	let <LstArg> =
	    %% Line 122
	    apply 'rng'/2
		(500, 50)
	in  let <RecArg> =
		%% Line 123
		apply 'random_test_records'/2
		    (500, 50)
	    in  %% Line 124
		[{[115|[115]],( 'ss'/1
				-| [{'id',{0,0,'-all_tests/0-fun-0-'}}] ),[500]}|%% Line 125
										 [{[115|[101|[115]]],( 'ses'/1
												       -| [{'id',{0,0,'-all_tests/0-fun-1-'}}] ),[500]}|%% Line 126
																			[{[112|[121|[116|[104]]]],( 'pyth'/1
																						    -| [{'id',{0,0,'-all_tests/0-fun-2-'}}] ),[125]}|%% Line 127
																												     [{[112|[121|[116|[104|[49]]]]],( 'pyth1'/1
																																      -| [{'id',{0,0,'-all_tests/0-fun-3-'}}] ),[125]}|%% Line 128
																																						       [{[112|[121|[116|[104|[50]]]]],( 'pyth2'/0
																																											-| [{'id',{0,0,'-all_tests/0-fun-4-'}}] ),[]}|%% Line 129
																																																      [{[112|[121|[116|[104|[51]]]]],( 'pyth3'/1
																																																				       -| [{'id',{0,0,'-all_tests/0-fun-5-'}}] ),[125]}|%% Line 130
																																																											[{[112|[101|[110]]],( 'pen'/1
																																																													      -| [{'id',{0,0,'-all_tests/0-fun-6-'}}] ),[500]}|%% Line 131
																																																																			       [{[112|[101|[110|[50]]]],( 'pen2'/1
																																																																							  -| [{'id',{0,0,'-all_tests/0-fun-7-'}}] ),[500]}|%% Line 132
																																																																													   [{[112|[101|[110|[50|[95|[100|[117|[109|[98]]]]]]]]],( 'pen2_dumb'/1
																																																																																				  -| [{'id',{0,0,'-all_tests/0-fun-8-'}}] ),[500]}|%% Line 133
																																																																																										   [{[112|[101|[110|[50|[95|[100|[117|[109|[98|[95|[111|[112|[116]]]]]]]]]]]]],( 'pen2_dumb_opt'/1
																																																																																																				 -| [{'id',{0,0,'-all_tests/0-fun-9-'}}] ),[500]}|%% Line 134
																																																																																																										  [{[112|[101|[110|[50|[95|[102|[111|[108|[100|[114]]]]]]]]]],( 'pen2_foldr'/1
																																																																																																																		-| [{'id',{0,0,'-all_tests/0-fun-10-'}}] ),[500]}|%% Line 135
																																																																																																																								  [{[112|[101|[110|[50|[95|[102|[111|[108|[100|[108]]]]]]]]]],( 'pen2_foldl'/1
																																																																																																																																-| [{'id',{0,0,'-all_tests/0-fun-11-'}}] ),[500]}|%% Line 136
																																																																																																																																						  [{[112|[101|[110|[50|[95|[108|[105|[115|[116|[115|[102|[117|[110|[115]]]]]]]]]]]]]],( 'pen2_listsfuns'/1
																																																																																																																																																	-| [{'id',{0,0,'-all_tests/0-fun-12-'}}] ),[500]}|%% Line 137
																																																																																																																																																							  [{[112|[101|[110|[50|[95|[109|[114]]]]]]],( 'pen2_mr'/1
																																																																																																																																																												      -| [{'id',{0,0,'-all_tests/0-fun-13-'}}] ),[500]}|%% Line 138
																																																																																																																																																																			[{[112|[101|[110|[50|[95|[108|[97|[122|[121]]]]]]]]],( 'pen2_lazy'/1
																																																																																																																																																																									       -| [{'id',{0,0,'-all_tests/0-fun-14-'}}] ),[500]}|%% Line 139
																																																																																																																																																																																 [{[112|[101|[110|[50|[95|[108|[97|[122|[121|[95|[99|[112|[115]]]]]]]]]]]]],( 'pen2_lazy_cps'/1
																																																																																																																																																																																									      -| [{'id',{0,0,'-all_tests/0-fun-15-'}}] ),[500]}|%% Line 140
																																																																																																																																																																																																[{[115|[105|[110|[103|[108|[101|[95|[102|[105|[108|[116|[101|[114]]]]]]]]]]]]],( 'single_filter'/1
																																																																																																																																																																																																										 -| [{'id',{0,0,'-all_tests/0-fun-16-'}}] ),[LstArg|[]]}|%% Line 141
																																																																																																																																																																																																																	 [{[114|[101|[99|[111|[114|[100|[95|[101|[120|[116|[114|[97|[99|[116]]]]]]]]]]]]]],( 'record_extract'/1
																																																																																																																																																																																																																											     -| [{'id',{0,0,'-all_tests/0-fun-17-'}}] ),[RecArg|[]]}|%% Line 142
																																																																																																																																																																																																																																		     [{[102|[117|[110|[99|[116|[105|[111|[110|[95|[112|[97|[114|[97|[109]]]]]]]]]]]]]],( 'function_param_lc'/2
																																																																																																																																																																																																																																													 -| [{'id',{0,0,'-all_tests/0-fun-18-'}}] ),['param'|[LstArg|[]]]}|%% Line 143
																																																																																																																																																																																																																																																					   [{[115|[111|[114|[116|[101|[100|[95|[103|[101|[110]]]]]]]]]],( 'sorted_gen'/1
																																																																																																																																																																																																																																																													  -| [{'id',{0,0,'-all_tests/0-fun-19-'}}] ),[RecArg|[]]}|%% Line 144
																																																																																																																																																																																																																																																																				  [{[109|[97|[107|[101|[95|[110]]]]]],( 'make_n'/2
																																																																																																																																																																																																																																																																									-| [{'id',{0,0,'-all_tests/0-fun-20-'}}] ),[{'param1','param2'}|[500]]}|%% Line 145
																																																																																																																																																																																																																																																																																		[{[105|[110|[116|[101|[114|[109|[101|[100|[105|[97|[114|[121|[95|[108|[105|[115|[116]]]]]]]]]]]]]]]]],( 'intermediary_list'/1
																																																																																																																																																																																																																																																																																															-| [{'id',{0,0,'-all_tests/0-fun-21-'}}] ),[500]}|%% Line 146
																																																																																																																																																																																																																																																																																																					  [{[105|[110|[116|[101|[114|[109|[101|[100|[105|[97|[114|[121|[95|[108|[105|[115|[116|[50]]]]]]]]]]]]]]]]]],( 'intermediary_list2'/1
																																																																																																																																																																																																																																																																																																																		       -| [{'id',{0,0,'-all_tests/0-fun-22-'}}] ),[500]}|%% Line 147
																																																																																																																																																																																																																																																																																																																									 [{[105|[110|[116|[101|[114|[109|[101|[100|[105|[97|[114|[121|[95|[108|[105|[115|[116|[51]]]]]]]]]]]]]]]]]],( 'intermediary_list3'/1
																																																																																																																																																																																																																																																																																																																																						      -| [{'id',{0,0,'-all_tests/0-fun-23-'}}] ),[500]}|%% Line 148
																																																																																																																																																																																																																																																																																																																																													[{[110|[101|[115|[116|[101|[100|[95|[108|[99|[95|[103|[101|[110]]]]]]]]]]]]],( 'nested_lc_gen'/1
																																																																																																																																																																																																																																																																																																																																																						       -| [{'id',{0,0,'-all_tests/0-fun-24-'}}] ),[LstArg|[]]}|%% Line 149
																																																																																																																																																																																																																																																																																																																																																													       [{[110|[101|[115|[116|[101|[100|[95|[108|[99|[95|[103|[101|[110|[95|[111|[112|[116]]]]]]]]]]]]]]]]],( 'nested_lc_gen_opt'/1
																																																																																																																																																																																																																																																																																																																																																																										     -| [{'id',{0,0,'-all_tests/0-fun-25-'}}] ),[LstArg|[]]}|%% Line 150
																																																																																																																																																																																																																																																																																																																																																																																	     [{[117|[110|[117|[115|[101|[100]]]]]],( 'unused'/0
																																																																																																																																																																																																																																																																																																																																																																																						     -| [{'id',{0,0,'-all_tests/0-fun-26-'}}] ),[]}|%% Line 151
																																																																																																																																																																																																																																																																																																																																																																																												    []]]]]]]]]]]]]]]]]]]]]]]]]]]]
'ss'/1 =
    %% Line 156
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor7> =
		  %% Line 157
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[X|_cor2]> when 'true' ->
				      let <_cor5> =
					  call 'erlang':'*'
					      (X, X)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'lists':'seq'
				(1, N)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 157
		  call 'lists':'sum'
		      (_cor7)
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'ss',1}}] )
	    -| ['compiler_generated'] )
	end
'ses'/1 =
    %% Line 160
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor8> =
		  %% Line 161
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[X|_cor2]>
				      when %% Line 162
					try
					    let <_cor3> =
						call 'erlang':'rem'
						    (X, 2)
					    in  call 'erlang':'=:='
						    (_cor3, 0)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor6> =
					  call 'erlang':'*'
					      (X, X)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  ( <[X|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor4> =
			    call 'lists':'seq'
				(1, N)
			in  apply 'lc$^0'/1
				(_cor4)
		    -| ['list_comprehension'] )
	      in  %% Line 161
		  call 'lists':'sum'
		      (_cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'ses',1}}] )
	    -| ['compiler_generated'] )
	end
'pen'/1 =
    %% Line 165
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 166
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor9) ->
			    case _cor9 of
			      <[X|_cor2]>
				  when %% Line 167
				    try
					let <_cor3> =
					    call 'erlang':'rem'
						(X, 2)
					in  call 'erlang':'=:='
						(_cor3, 0)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor10) ->
						case _cor10 of
						  <[%% Line 168
						    Y|_cor6]>
						      when %% Line 169
							try
							    let <_cor7> =
								call 'erlang':'rem'
								    (Y, 2)
							    in  call 'erlang':'=:='
								    (_cor7, 1)
							of <Try> ->
							    Try
							catch <T,R> ->
							    'false' ->
						      let <_cor11> =
							  %% Line 168
							  apply 'lc$^1'/1
							      (_cor6)
						      in  ( [[X|[Y|[]]]|_cor11]
							    -| ['compiler_generated'] )
						  ( <[%% Line 168
						      Y|_cor6]> when 'true' ->
							%% Line 168
							apply 'lc$^1'/1
							    (_cor6)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor2)
						  ( <_cor10> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor10})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor8> =
					    %% Line 168
					    call 'lists':'seq'
						(1, N)
					in  apply 'lc$^1'/1
						(_cor8)
				    -| ['list_comprehension'] )
			      ( <[X|_cor2]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor2)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor4> =
			call 'lists':'seq'
			    (1, N)
		    in  apply 'lc$^0'/1
			    (_cor4)
		-| ['list_comprehension'] )
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'pen',1}}] )
	    -| ['compiler_generated'] )
	end
'pen2'/1 =
    %% Line 172
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 173
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor13) ->
			    case _cor13 of
			      <[X|_cor2]>
				  when %% Line 174
				    try
					let <_cor3> =
					    call 'erlang':'rem'
						(X, 2)
					in  call 'erlang':'=:='
						(_cor3, 0)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor14) ->
						case _cor14 of
						  <[%% Line 175
						    Y|_cor6]>
						      when %% Line 176
							try
							    let <_cor7> =
								call 'erlang':'rem'
								    (Y, 2)
							    in  let <_cor8> =
								    call 'erlang':'=:='
									(_cor7, 1)
								in  let <_cor9> =
									%% Line 177
									call 'erlang':'+'
									    (X, Y)
								    in  let <_cor10> =
									    %% Line 177
									    call 'erlang':'rem'
										(_cor9, 5)
									in  let <_cor11> =
										%% Line 177
										call 'erlang':'=/='
										    (_cor10, 0)
									    in  call 'erlang':'and'
										    (_cor8, _cor11)
							of <Try> ->
							    Try
							catch <T,R> ->
							    'false' ->
						      let <_cor15> =
							  %% Line 175
							  apply 'lc$^1'/1
							      (_cor6)
						      in  ( [[X|[Y|[]]]|_cor15]
							    -| ['compiler_generated'] )
						  ( <[%% Line 175
						      Y|_cor6]> when 'true' ->
							%% Line 175
							apply 'lc$^1'/1
							    (_cor6)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor2)
						  ( <_cor14> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor14})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor12> =
					    %% Line 175
					    call 'lists':'seq'
						(1, N)
					in  apply 'lc$^1'/1
						(_cor12)
				    -| ['list_comprehension'] )
			      ( <[X|_cor2]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor2)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor13> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor13})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor4> =
			call 'lists':'seq'
			    (1, N)
		    in  apply 'lc$^0'/1
			    (_cor4)
		-| ['list_comprehension'] )
	  ( <_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16})
		  -| [{'function_name',{'pen2',1}}] )
	    -| ['compiler_generated'] )
	end
'pen2_dumb'/1 =
    %% Line 180
    fun (_cor0) ->
	%% Line 181
	apply 'pen2_dumb_helper'/4
	    (_cor0, 1, 1, [])
'pen2_dumb_helper'/4 =
    %% Line 182
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,X,_X_Y,L>
	      when call 'erlang':'>'
		    (X,
		     N) ->
	      %% Line 183
	      L
	  %% Line 184
	  <N,X,Y,L>
	      when call 'erlang':'>'
		    (Y,
		     N) ->
	      let <_cor4> =
		  %% Line 185
		  call 'erlang':'+'
		      (X, 1)
	      in  %% Line 185
		  apply 'pen2_dumb_helper'/4
		      (N, _cor4, 0, L)
	  %% Line 186
	  <N,X,Y,L>
	      when try
		    let <_cor6> =
			call 'erlang':'rem'
			    (X, 2)
		    in  ( case <> of
			    ( <>
				  when call 'erlang':'=:='
					(_cor6,
					 0) ->
				  let <_cor8> =
				      call 'erlang':'rem'
					  (Y, 2)
				  in  ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (_cor8,
						       1) ->
						let <_cor9> =
						    call 'erlang':'+'
							(X, Y)
						in  let <_cor10> =
							call 'erlang':'rem'
							    (_cor9, 5)
						    in  call 'erlang':'=/='
							    (_cor10, 0)
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor14> =
		  %% Line 187
		  call 'erlang':'+'
		      (Y, 1)
	      in  let <_cor15> =
		      %% Line 187
		      apply 'pen2_dumb_helper'/4
			  (N, X, _cor14, L)
		  in  %% Line 187
		      [[X|[Y|[]]]|_cor15]
	  %% Line 188
	  <N,X,Y,L> when 'true' ->
	      let <_cor16> =
		  %% Line 189
		  call 'erlang':'+'
		      (Y, 1)
	      in  %% Line 189
		  apply 'pen2_dumb_helper'/4
		      (N, X, _cor16, L)
	end
'pen2_dumb_opt'/1 =
    %% Line 193
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 194
	    call 'lists':'seq'
		(1, _cor0)
	in  let <Lst> =
		%% Line 194
		call 'lists':'reverse'
		    (_cor1)
	    in  %% Line 195
		apply 'pen2_dumb_opt_helper'/5
		    (Lst, Lst, Lst, Lst, [])
'pen2_dumb_opt_helper'/5 =
    %% Line 196
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor17,_cor18,_cor19,L> when 'true' ->
	      L
	  %% Line 197
	  <[_X_X|Xs],[],XGen,YGen,L> when 'true' ->
	      %% Line 198
	      apply 'pen2_dumb_opt_helper'/5
		  (Xs, YGen, XGen, YGen, L)
	  %% Line 199
	  <[X|Xs],_cor20,XGen,YGen,L>
	      when try
		    let <_cor5> =
			call 'erlang':'rem'
			    (X, 2)
		    in  call 'erlang':'=/='
			    (_cor5, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 200
	      apply 'pen2_dumb_opt_helper'/5
		  (Xs, YGen, XGen, YGen, L)
	  %% Line 201
	  <AX = [X|_X_Xs],[Y|Ys],XGen,YGen,L>
	      when try
		    let <_cor7> =
			call 'erlang':'rem'
			    (Y, 2)
		    in  ( case <> of
			    ( <>
				  when call 'erlang':'=:='
					(_cor7,
					 1) ->
				  let <_cor8> =
				      %% Line 202
				      call 'erlang':'+'
					  (X, Y)
				  in  let <_cor9> =
					  %% Line 202
					  call 'erlang':'rem'
					      (_cor8, 5)
				      in  %% Line 202
					  call 'erlang':'=/='
					      (_cor9, 0)
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 203
	      apply 'pen2_dumb_opt_helper'/5
		  (AX, Ys, XGen, YGen, [[X|[Y|[]]]|L])
	  %% Line 204
	  <AX,[_X_Y|Ys],XGen,YGen,L> when 'true' ->
	      %% Line 205
	      apply 'pen2_dumb_opt_helper'/5
		  (AX, Ys, XGen, YGen, L)
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'pen2_dumb_opt_helper',5}}] )
	    -| ['compiler_generated'] )
	end
'pen2_foldl'/1 =
    %% Line 209
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <Gen> =
		  %% Line 210
		  call 'lists':'seq'
		      (1, N)
	      in  let <_cor19> =
		      %% Line 212
		      ( fun (_cor16,_cor15) ->
			    %% Line 213
			    case <> of
			      <>
				  when try
					let <_cor2> =
					    call 'erlang':'rem'
						(_cor16, 2)
					in  call 'erlang':'=:='
						(_cor2, 0)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor13> =
				      %% Line 215
				      ( fun (_cor10,_cor9) ->
					    %% Line 216
					    case <> of
					      <>
						  when try
							let <_cor4> =
							    call 'erlang':'rem'
								(_cor10, 2)
							in  ( case <> of
								( <>
								      when call 'erlang':'=:='
									    (_cor4,
									     1) ->
								      let <_cor5> =
									  call 'erlang':'+'
									      (_cor16, _cor10)
								      in  let <_cor6> =
									      call 'erlang':'rem'
										  (_cor5, 5)
									  in  call 'erlang':'=/='
										  (_cor6, 0)
								  -| ['compiler_generated'] )
								( <> when 'true' ->
								      'false'
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false' ->
						  [[_cor16|[_cor10|[]]]|_cor9]
					      %% Line 217
					      <> when 'true' ->
						  _cor9
					    end
					-| [{'id',{0,0,'-pen2_foldl/1-fun-0-'}}] )
				  in  let <_cor14> =
					  %% Line 214
					  call 'lists':'foldl'
					      (_cor13, %% Line 220
						       [], %% Line 220
							   Gen)
				      in  %% Line 220
					  call 'erlang':'++'
					      (_cor14, _cor15)
			      %% Line 221
			      <> when 'true' ->
				  _cor15
			    end
			-| [{'id',{0,0,'-pen2_foldl/1-fun-1-'}}] )
		  in  let <_cor20> =
			  %% Line 211
			  call 'lists':'foldl'
			      (_cor19, %% Line 223
				       [], %% Line 223
					   Gen)
		      in  %% Line 211
			  call 'lists':'reverse'
			      (_cor20)
	  ( <_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21})
		  -| [{'function_name',{'pen2_foldl',1}}] )
	    -| ['compiler_generated'] )
	end
'pen2_foldr'/1 =
    %% Line 225
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <Gen> =
		  %% Line 226
		  call 'lists':'seq'
		      (1, N)
	      in  let <_cor19> =
		      %% Line 228
		      ( fun (_cor16,_cor15) ->
			    %% Line 229
			    case <> of
			      <>
				  when try
					let <_cor2> =
					    call 'erlang':'rem'
						(_cor16, 2)
					in  call 'erlang':'=:='
						(_cor2, 0)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor13> =
				      %% Line 231
				      ( fun (_cor10,_cor9) ->
					    %% Line 232
					    case <> of
					      <>
						  when try
							let <_cor4> =
							    call 'erlang':'rem'
								(_cor10, 2)
							in  ( case <> of
								( <>
								      when call 'erlang':'=:='
									    (_cor4,
									     1) ->
								      let <_cor5> =
									  call 'erlang':'+'
									      (_cor16, _cor10)
								      in  let <_cor6> =
									      call 'erlang':'rem'
										  (_cor5, 5)
									  in  call 'erlang':'=/='
										  (_cor6, 0)
								  -| ['compiler_generated'] )
								( <> when 'true' ->
								      'false'
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false' ->
						  [[_cor16|[_cor10|[]]]|_cor9]
					      %% Line 233
					      <> when 'true' ->
						  _cor9
					    end
					-| [{'id',{0,0,'-pen2_foldr/1-fun-0-'}}] )
				  in  let <_cor14> =
					  %% Line 230
					  call 'lists':'foldr'
					      (_cor13, %% Line 236
						       [], %% Line 236
							   Gen)
				      in  %% Line 236
					  call 'erlang':'++'
					      (_cor14, _cor15)
			      %% Line 237
			      <> when 'true' ->
				  _cor15
			    end
			-| [{'id',{0,0,'-pen2_foldr/1-fun-1-'}}] )
		  in  %% Line 227
		      call 'lists':'foldr'
			  (_cor19, %% Line 239
				   [], %% Line 239
				       Gen)
	  ( <_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20})
		  -| [{'function_name',{'pen2_foldr',1}}] )
	    -| ['compiler_generated'] )
	end
'pen2_listsfuns'/1 =
    %% Line 241
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <Gen> =
		  %% Line 242
		  call 'lists':'seq'
		      (1, N)
	      in  let <_cor24> =
		      %% Line 243
		      ( fun (_cor22) ->
			    case _cor22 of
			      <[X|[Y|[]]]> when 'true' ->
				  let <_cor20> =
				      call 'erlang':'+'
					  (X, Y)
				  in  let <_cor21> =
					  call 'erlang':'rem'
					      (_cor20, 5)
				      in  call 'erlang':'=/='
					      (_cor21, 0)
			      ( <_cor23> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor23})
				      -| [{'function_name',{'-pen2_listsfuns/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-pen2_listsfuns/1-fun-0-'}}] )
		  in  let <_cor19> =
			  %% Line 244
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor16) ->
					case _cor16 of
					  <[X|_cor3]> when 'true' ->
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor17) ->
							    case _cor17 of
							      <[%% Line 245
								Y|_cor10]> when 'true' ->
								  let <_cor18> =
								      %% Line 245
								      apply 'lc$^1'/1
									  (_cor10)
								  in  ( [[X|[Y|[]]]|_cor18]
									-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor3)
							      ( <_cor17> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor17})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  let <_cor14> =
							%% Line 245
							( fun (_cor12) ->
							      let <_cor11> =
								  call 'erlang':'rem'
								      (_cor12, 2)
							      in  call 'erlang':'=:='
								      (_cor11, 1)
							  -| [{'id',{0,0,'-pen2_listsfuns/1-fun-2-'}}] )
						    in  let <_cor15> =
							    %% Line 245
							    call 'lists':'filter'
								(_cor14, Gen)
							in  apply 'lc$^1'/1
								(_cor15)
						-| ['list_comprehension'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor16> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor16})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  let <_cor7> =
				    ( fun (_cor5) ->
					  let <_cor4> =
					      call 'erlang':'rem'
						  (_cor5, 2)
					  in  call 'erlang':'=:='
						  (_cor4, 0)
				      -| [{'id',{0,0,'-pen2_listsfuns/1-fun-1-'}}] )
				in  let <_cor8> =
					call 'lists':'filter'
					    (_cor7, Gen)
				    in  apply 'lc$^0'/1
					    (_cor8)
			    -| ['list_comprehension'] )
		      in  %% Line 243
			  call 'lists':'filter'
			      (_cor24, _cor19)
	  ( <_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25})
		  -| [{'function_name',{'pen2_listsfuns',1}}] )
	    -| ['compiler_generated'] )
	end
'pen2_mr'/1 =
    %% Line 248
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <Gen> =
		  %% Line 249
		  call 'lists':'seq'
		      (1, N)
	      in  let <RedYs> =
		      %% Line 250
		      letrec
			  'Red_ys'/3 =
			      ( fun (_cor11,_cor10,_cor9) ->
				    let <Red_ys> = 'Red_ys'/3
				    in  case <_cor11,_cor10,_cor9> of
					  <AX = [X|_X_Xs],[Y|Ys],MR> when 'true' ->
					      %% Line 251
					      case <> of
						<>
						    when try
							  let <_cor3> =
							      call 'erlang':'rem'
								  (Y, 2)
							  in  ( case <> of
								  ( <>
									when call 'erlang':'=:='
									      (_cor3,
									       1) ->
									let <_cor4> =
									    call 'erlang':'+'
										(X, Y)
									in  let <_cor5> =
										call 'erlang':'rem'
										    (_cor4, 5)
									    in  call 'erlang':'=/='
										    (_cor5, 0)
								    -| ['compiler_generated'] )
								  ( <> when 'true' ->
									'false'
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  'false' ->
						    let <_cor8> =
							%% Line 252
							apply Red_ys
							    (AX, Ys, MR)
						    in  %% Line 252
							[[X|[Y|[]]]|_cor8]
						%% Line 253
						<> when 'true' ->
						    apply Red_ys
							(AX, Ys, MR)
					      end
					  %% Line 255
					  <[_X_X|Xs],[],MR> when 'true' ->
					      apply MR
						  (Xs)
					  ( <_cor14,_cor13,_cor12> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor14,_cor13,_cor12})
						  -| [{'function_name',{'-pen2_mr/1-Red_ys-0-',3}}] )
					    -| ['compiler_generated'] )
					end
				-| [{'id',{0,0,'-pen2_mr/1-Red_ys-0-'}}] )
		      in  'Red_ys'/3
		  in  let <RedXs> =
			  %% Line 256
			  letrec
			      'Red_xs'/1 =
				  ( fun (_cor17) ->
					let <Red_xs> = 'Red_xs'/1
					in  case _cor17 of
					      <AX = [X|Xs]> when 'true' ->
						  %% Line 257
						  case <> of
						    <>
							when try
							      let <_cor16> =
								  call 'erlang':'rem'
								      (X, 2)
							      in  call 'erlang':'=:='
								      (_cor16, 0)
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false' ->
							apply RedYs
							    (AX, Gen, Red_xs)
						    %% Line 258
						    <> when 'true' ->
							apply Red_xs
							    (Xs)
						  end
					      %% Line 260
					      <[]> when 'true' ->
						  []
					      ( <_cor18> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor18})
						      -| [{'function_name',{'-pen2_mr/1-Red_xs-1-',1}}] )
						-| ['compiler_generated'] )
					    end
				    -| [{'id',{0,0,'-pen2_mr/1-Red_xs-1-'}}] )
			  in  'Red_xs'/1
		      in  %% Line 262
			  apply RedXs
			      (Gen)
	  ( <_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20})
		  -| [{'function_name',{'pen2_mr',1}}] )
	    -| ['compiler_generated'] )
	end
'pen2_lazy'/1 =
    %% Line 265
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <Gen> =
		  %% Line 266
		  apply 'lazy_seq'/2
		      (1, N)
	      in  let <RedYs> =
		      %% Line 267
		      letrec
			  'Red_ys'/3 =
			      ( fun (_cor14,_cor13,_cor12) ->
				    let <Red_ys> = 'Red_ys'/3
				    in  case <_cor14,_cor13,_cor12> of
					  <AX = [X|_X_Xs],[Y|Ys],MR> when 'true' ->
					      %% Line 268
					      case <> of
						<>
						    when try
							  let <_cor3> =
							      call 'erlang':'rem'
								  (Y, 2)
							  in  ( case <> of
								  ( <>
									when call 'erlang':'=:='
									      (_cor3,
									       1) ->
									let <_cor4> =
									    call 'erlang':'+'
										(X, Y)
									in  let <_cor5> =
										call 'erlang':'rem'
										    (_cor4, 5)
									    in  call 'erlang':'=/='
										    (_cor5, 0)
								    -| ['compiler_generated'] )
								  ( <> when 'true' ->
									'false'
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  'false' ->
						    let <_cor8> =
							%% Line 269
							apply Ys
							    ()
						    in  let <_cor9> =
							    %% Line 269
							    apply Red_ys
								(AX, _cor8, MR)
							in  %% Line 269
							    [[X|[Y|[]]]|_cor9]
						%% Line 270
						<> when 'true' ->
						    let <_cor10> =
							apply Ys
							    ()
						    in  apply Red_ys
							    (AX, _cor10, MR)
					      end
					  %% Line 271
					  <[_X_X|Xs],[],MR> when 'true' ->
					      let <_cor11> =
						  apply Xs
						      ()
					      in  apply MR
						      (_cor11)
					  ( <_cor17,_cor16,_cor15> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor17,_cor16,_cor15})
						  -| [{'function_name',{'-pen2_lazy/1-Red_ys-0-',3}}] )
					    -| ['compiler_generated'] )
					end
				-| [{'id',{0,0,'-pen2_lazy/1-Red_ys-0-'}}] )
		      in  'Red_ys'/3
		  in  let <RedXs> =
			  %% Line 272
			  letrec
			      'Red_xs'/1 =
				  ( fun (_cor21) ->
					let <Red_xs> = 'Red_xs'/1
					in  case _cor21 of
					      <AX = [X|Xs]> when 'true' ->
						  %% Line 273
						  case <> of
						    <>
							when try
							      let <_cor19> =
								  call 'erlang':'rem'
								      (X, 2)
							      in  call 'erlang':'=:='
								      (_cor19, 0)
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false' ->
							apply RedYs
							    (AX, Gen, Red_xs)
						    %% Line 274
						    <> when 'true' ->
							let <_cor20> =
							    apply Xs
								()
							in  apply Red_xs
								(_cor20)
						  end
					      %% Line 276
					      <[]> when 'true' ->
						  []
					      ( <_cor22> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor22})
						      -| [{'function_name',{'-pen2_lazy/1-Red_xs-1-',1}}] )
						-| ['compiler_generated'] )
					    end
				    -| [{'id',{0,0,'-pen2_lazy/1-Red_xs-1-'}}] )
			  in  'Red_xs'/1
		      in  %% Line 277
			  apply RedXs
			      (Gen)
	  ( <_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24})
		  -| [{'function_name',{'pen2_lazy',1}}] )
	    -| ['compiler_generated'] )
	end
'pen2_lazy_cps'/1 =
    %% Line 280
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <Gen> =
		  %% Line 281
		  apply 'lazy_cp_seq'/2
		      (1, N)
	      in  let <RedYs> =
		      %% Line 282
		      letrec
			  'Red_ys'/3 =
			      ( fun (_cor14,_cor13,_cor12) ->
				    let <Red_ys> = 'Red_ys'/3
				    in  case <_cor14,_cor13,_cor12> of
					  <AX = [X|_X_Xs],[Y|Ys],MR> when 'true' ->
					      %% Line 283
					      case <> of
						<>
						    when try
							  let <_cor3> =
							      call 'erlang':'rem'
								  (Y, 2)
							  in  ( case <> of
								  ( <>
									when call 'erlang':'=:='
									      (_cor3,
									       1) ->
									let <_cor4> =
									    call 'erlang':'+'
										(X, Y)
									in  let <_cor5> =
										call 'erlang':'rem'
										    (_cor4, 5)
									    in  call 'erlang':'=/='
										    (_cor5, 0)
								    -| ['compiler_generated'] )
								  ( <> when 'true' ->
									'false'
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  'false' ->
						    let <_cor8> =
							%% Line 284
							apply Ys
							    ()
						    in  let <_cor9> =
							    %% Line 284
							    apply Red_ys
								(AX, _cor8, MR)
							in  %% Line 284
							    [[X|[Y|[]]]|_cor9]
						%% Line 285
						<> when 'true' ->
						    let <_cor10> =
							apply Ys
							    ()
						    in  apply Red_ys
							    (AX, _cor10, MR)
					      end
					  %% Line 286
					  <[_X_X|Xs],[],MR> when 'true' ->
					      let <_cor11> =
						  apply Xs
						      ()
					      in  apply MR
						      (_cor11)
					  ( <_cor17,_cor16,_cor15> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor17,_cor16,_cor15})
						  -| [{'function_name',{'-pen2_lazy_cps/1-Red_ys-0-',3}}] )
					    -| ['compiler_generated'] )
					end
				-| [{'id',{0,0,'-pen2_lazy_cps/1-Red_ys-0-'}}] )
		      in  'Red_ys'/3
		  in  let <RedXs> =
			  %% Line 287
			  letrec
			      'Red_xs'/1 =
				  ( fun (_cor21) ->
					let <Red_xs> = 'Red_xs'/1
					in  case _cor21 of
					      <AX = [X|Xs]> when 'true' ->
						  %% Line 288
						  case <> of
						    <>
							when try
							      let <_cor19> =
								  call 'erlang':'rem'
								      (X, 2)
							      in  call 'erlang':'=:='
								      (_cor19, 0)
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false' ->
							apply RedYs
							    (AX, Gen, Red_xs)
						    %% Line 289
						    <> when 'true' ->
							let <_cor20> =
							    apply Xs
								()
							in  apply Red_xs
								(_cor20)
						  end
					      %% Line 291
					      <[]> when 'true' ->
						  []
					      ( <_cor22> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor22})
						      -| [{'function_name',{'-pen2_lazy_cps/1-Red_xs-1-',1}}] )
						-| ['compiler_generated'] )
					    end
				    -| [{'id',{0,0,'-pen2_lazy_cps/1-Red_xs-1-'}}] )
			  in  'Red_xs'/1
		      in  %% Line 292
			  apply RedXs
			      (Gen)
	  ( <_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24})
		  -| [{'function_name',{'pen2_lazy_cps',1}}] )
	    -| ['compiler_generated'] )
	end
'unused'/0 =
    %% Line 296
    fun () ->
	do  %% Line 297
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[X|_cor1]> when 'true' ->
				do  ( call ( 'timer'
					     -| ['result_not_wanted'] ):( 'sleep'
									  -| ['result_not_wanted'] )
					  (( 1
					     -| ['result_not_wanted'] ))
				      -| ['result_not_wanted'] )
				    apply 'lc$^0'/1
					(_cor1)
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor2> =
		      ( call ( 'lists'
			       -| ['result_not_wanted'] ):( 'seq'
							    -| ['result_not_wanted'] )
			    (( 1
			       -| ['result_not_wanted'] ), ( 1000
							     -| ['result_not_wanted'] ))
			-| ['result_not_wanted'] )
		  in  apply 'lc$^0'/1
			  (_cor2)
	      -| ['list_comprehension'] )
	    %% Line 298
	    'ok'
'pyth'/1 =
    %% Line 303
    fun (_cor0) ->
	%% Line 304
	( letrec
	      'lc$^0'/1 =
		  fun (_cor22) ->
		      case _cor22 of
			<[A|_cor2]> when 'true' ->
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor23) ->
					  case _cor23 of
					    <[%% Line 305
					      B|_cor5]> when 'true' ->
						( letrec
						      'lc$^2'/1 =
							  fun (_cor24) ->
							      case _cor24 of
								<[%% Line 306
								  C|_cor8]>
								    when %% Line 307
								      try
									  let <_cor9> =
									      call 'erlang':'=<'
										  (A, B)
									  in  let <_cor10> =
										  %% Line 308
										  call 'erlang':'=<'
										      (B, C)
									      in  let <_cor11> =
										      %% Line 309
										      call 'erlang':'+'
											  (A, B)
										  in  let <_cor12> =
											  %% Line 309
											  call 'erlang':'+'
											      (_cor11, C)
										      in  let <_cor13> =
											      %% Line 309
											      call 'erlang':'=<'
												  (_cor12, _cor0)
											  in  let <_cor16> =
												  %% Line 310
												  call 'erlang':'*'
												      (A, A)
											      in  let <_cor15> =
												      %% Line 310
												      call 'erlang':'*'
													  (B, B)
												  in  let <_cor17> =
													  %% Line 310
													  call 'erlang':'+'
													      (_cor16, _cor15)
												      in  let <_cor14> =
													      %% Line 310
													      call 'erlang':'*'
														  (C, C)
													  in  let <_cor18> =
														  %% Line 310
														  call 'erlang':'=:='
														      (_cor17, _cor14)
													      in  let <_cor19> =
														      call 'erlang':'and'
															  (_cor13, _cor18)
														  in  let <_cor20> =
															  call 'erlang':'and'
															      (_cor10, _cor19)
														      in  call 'erlang':'and'
															      (_cor9, _cor20)
								      of <Try> ->
									  Try
								      catch <T,R> ->
									  'false' ->
								    let <_cor25> =
									%% Line 306
									apply 'lc$^2'/1
									    (_cor8)
								    in  ( [{A,B,C}|_cor25]
									  -| ['compiler_generated'] )
								( <[%% Line 306
								    C|_cor8]> when 'true' ->
								      %% Line 306
								      apply 'lc$^2'/1
									  (_cor8)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    %% Line 305
								    apply 'lc$^1'/1
									(_cor5)
								( <_cor24> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor24})
									-| [{'function_name',{'lc$^2',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  let <_cor21> =
							  %% Line 306
							  call 'lists':'seq'
							      (1, _cor0)
						      in  apply 'lc$^2'/1
							      (_cor21)
						  -| ['list_comprehension'] )
					    <[]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor2)
					    ( <_cor23> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor23})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor6> =
				      %% Line 305
				      call 'lists':'seq'
					  (1, _cor0)
				  in  apply 'lc$^1'/1
					  (_cor6)
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor22> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor22})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  call 'lists':'seq'
		      (1, _cor0)
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
'pyth1'/1 =
    %% Line 317
    fun (_cor0) ->
	%% Line 318
	( letrec
	      'lc$^0'/1 =
		  fun (_cor26) ->
		      case _cor26 of
			<[A|_cor2]> when 'true' ->
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor27) ->
					  case _cor27 of
					    <[%% Line 319
					      B|_cor6]> when 'true' ->
						( letrec
						      'lc$^2'/1 =
							  fun (_cor28) ->
							      case _cor28 of
								<[%% Line 320
								  C|_cor11]>
								    when %% Line 321
								      try
									  let <_cor12> =
									      call 'erlang':'=<'
										  (A, B)
									  in  let <_cor13> =
										  %% Line 322
										  call 'erlang':'=<'
										      (B, C)
									      in  let <_cor14> =
										      %% Line 323
										      call 'erlang':'+'
											  (A, B)
										  in  let <_cor15> =
											  %% Line 323
											  call 'erlang':'+'
											      (_cor14, C)
										      in  let <_cor16> =
											      %% Line 323
											      call 'erlang':'=<'
												  (_cor15, _cor0)
											  in  let <_cor19> =
												  %% Line 324
												  call 'erlang':'*'
												      (A, A)
											      in  let <_cor18> =
												      %% Line 324
												      call 'erlang':'*'
													  (B, B)
												  in  let <_cor20> =
													  %% Line 324
													  call 'erlang':'+'
													      (_cor19, _cor18)
												      in  let <_cor17> =
													      %% Line 324
													      call 'erlang':'*'
														  (C, C)
													  in  let <_cor21> =
														  %% Line 324
														  call 'erlang':'=:='
														      (_cor20, _cor17)
													      in  let <_cor22> =
														      call 'erlang':'and'
															  (_cor16, _cor21)
														  in  let <_cor23> =
															  call 'erlang':'and'
															      (_cor13, _cor22)
														      in  call 'erlang':'and'
															      (_cor12, _cor23)
								      of <Try> ->
									  Try
								      catch <T,R> ->
									  'false' ->
								    let <_cor29> =
									%% Line 320
									apply 'lc$^2'/1
									    (_cor11)
								    in  ( [{A,B,C}|_cor29]
									  -| ['compiler_generated'] )
								( <[%% Line 320
								    C|_cor11]> when 'true' ->
								      %% Line 320
								      apply 'lc$^2'/1
									  (_cor11)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    %% Line 319
								    apply 'lc$^1'/1
									(_cor6)
								( <_cor28> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor28})
									-| [{'function_name',{'lc$^2',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  let <_cor24> =
							  %% Line 320
							  call 'erlang':'+'
							      (B, 1)
						      in  let <_cor25> =
							      %% Line 320
							      call 'lists':'seq'
								  (_cor24, _cor0)
							  in  apply 'lc$^2'/1
								  (_cor25)
						  -| ['list_comprehension'] )
					    <[]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor2)
					    ( <_cor27> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor27})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor8> =
				      %% Line 319
				      call 'erlang':'+'
					  (A, 1)
				  in  let <_cor7> =
					  %% Line 319
					  call 'erlang':'-'
					      (_cor0, 1)
				      in  let <_cor9> =
					      %% Line 319
					      call 'lists':'seq'
						  (_cor8, _cor7)
					  in  apply 'lc$^1'/1
						  (_cor9)
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor26> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor26})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  call 'erlang':'-'
		      (_cor0, 2)
	      in  let <_cor4> =
		      call 'lists':'seq'
			  (1, _cor3)
		  in  apply 'lc$^0'/1
			  (_cor4)
	  -| ['list_comprehension'] )
'pyth2'/0 =
    %% Line 328
    fun () ->
	%% Line 329
	( letrec
	      'lc$^0'/1 =
		  fun (_cor21) ->
		      case _cor21 of
			<[A|_cor1]> when 'true' ->
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor22) ->
					  case _cor22 of
					    <[%% Line 330
					      B|_cor4]> when 'true' ->
						( letrec
						      'lc$^2'/1 =
							  fun (_cor23) ->
							      case _cor23 of
								<[%% Line 331
								  C|_cor7]>
								    when %% Line 332
								      try
									  let <_cor8> =
									      call 'erlang':'=<'
										  (A, B)
									  in  let <_cor9> =
										  %% Line 333
										  call 'erlang':'=<'
										      (B, C)
									      in  let <_cor10> =
										      %% Line 334
										      call 'erlang':'+'
											  (A, B)
										  in  let <_cor11> =
											  %% Line 334
											  call 'erlang':'+'
											      (_cor10, C)
										      in  let <_cor12> =
											      %% Line 334
											      call 'erlang':'=<'
												  (_cor11, 125)
											  in  let <_cor15> =
												  %% Line 335
												  call 'erlang':'*'
												      (A, A)
											      in  let <_cor14> =
												      %% Line 335
												      call 'erlang':'*'
													  (B, B)
												  in  let <_cor16> =
													  %% Line 335
													  call 'erlang':'+'
													      (_cor15, _cor14)
												      in  let <_cor13> =
													      %% Line 335
													      call 'erlang':'*'
														  (C, C)
													  in  let <_cor17> =
														  %% Line 335
														  call 'erlang':'=:='
														      (_cor16, _cor13)
													      in  let <_cor18> =
														      call 'erlang':'and'
															  (_cor12, _cor17)
														  in  let <_cor19> =
															  call 'erlang':'and'
															      (_cor9, _cor18)
														      in  call 'erlang':'and'
															      (_cor8, _cor19)
								      of <Try> ->
									  Try
								      catch <T,R> ->
									  'false' ->
								    let <_cor24> =
									%% Line 331
									apply 'lc$^2'/1
									    (_cor7)
								    in  ( [{A,B,C}|_cor24]
									  -| ['compiler_generated'] )
								( <[%% Line 331
								    C|_cor7]> when 'true' ->
								      %% Line 331
								      apply 'lc$^2'/1
									  (_cor7)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    %% Line 330
								    apply 'lc$^1'/1
									(_cor4)
								( <_cor23> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor23})
									-| [{'function_name',{'lc$^2',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  let <_cor20> =
							  %% Line 331
							  call 'lists':'seq'
							      (1, 125)
						      in  apply 'lc$^2'/1
							      (_cor20)
						  -| ['list_comprehension'] )
					    <[]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor1)
					    ( <_cor22> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor22})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor5> =
				      %% Line 330
				      call 'lists':'seq'
					  (1, 125)
				  in  apply 'lc$^1'/1
					  (_cor5)
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor21> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor21})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor2> =
		  call 'lists':'seq'
		      (1, 125)
	      in  apply 'lc$^0'/1
		      (_cor2)
	  -| ['list_comprehension'] )
'pyth3'/1 =
    %% Line 338
    fun (_cor0) ->
	let <Lst> =
	    %% Line 339
	    call 'lists':'seq'
		(1, _cor0)
	in  %% Line 340
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor20) ->
			  case _cor20 of
			    <[A|_cor3]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor21) ->
					      case _cor21 of
						<[%% Line 341
						  B|_cor5]> when 'true' ->
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor22) ->
								  case _cor22 of
								    <[%% Line 342
								      C|_cor7]>
									when %% Line 343
									  try
									      let <_cor8> =
										  call 'erlang':'=<'
										      (A, B)
									      in  let <_cor9> =
										      %% Line 344
										      call 'erlang':'=<'
											  (B, C)
										  in  let <_cor10> =
											  %% Line 345
											  call 'erlang':'+'
											      (A, B)
										      in  let <_cor11> =
											      %% Line 345
											      call 'erlang':'+'
												  (_cor10, C)
											  in  let <_cor12> =
												  %% Line 345
												  call 'erlang':'=<'
												      (_cor11, _cor0)
											      in  let <_cor15> =
												      %% Line 346
												      call 'erlang':'*'
													  (A, A)
												  in  let <_cor14> =
													  %% Line 346
													  call 'erlang':'*'
													      (B, B)
												      in  let <_cor16> =
													      %% Line 346
													      call 'erlang':'+'
														  (_cor15, _cor14)
													  in  let <_cor13> =
														  %% Line 346
														  call 'erlang':'*'
														      (C, C)
													      in  let <_cor17> =
														      %% Line 346
														      call 'erlang':'=:='
															  (_cor16, _cor13)
														  in  let <_cor18> =
															  call 'erlang':'and'
															      (_cor12, _cor17)
														      in  let <_cor19> =
															      call 'erlang':'and'
																  (_cor9, _cor18)
															  in  call 'erlang':'and'
																  (_cor8, _cor19)
									  of <Try> ->
									      Try
									  catch <T,R> ->
									      'false' ->
									let <_cor23> =
									    %% Line 342
									    apply 'lc$^2'/1
										(_cor7)
									in  ( [{A,B,C}|_cor23]
									      -| ['compiler_generated'] )
								    ( <[%% Line 342
									C|_cor7]> when 'true' ->
									  %% Line 342
									  apply 'lc$^2'/1
									      (_cor7)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									%% Line 341
									apply 'lc$^1'/1
									    (_cor5)
								    ( <_cor22> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor22})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^2'/1
							      (%% Line 342
							       Lst)
						      -| ['list_comprehension'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor3)
						( <_cor21> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor21})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (%% Line 341
					   Lst)
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor20> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor20})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Lst)
	      -| ['list_comprehension'] )
'single_filter'/1 =
    %% Line 353
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 354
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[Entry|_cor2]>
				  when %% Line 355
				    call 'erlang':'is_integer'
					(Entry) ->
				  let <_cor4> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [Entry|_cor4]
					-| ['compiler_generated'] )
			      ( <[Entry|_cor2]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor2)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(N)
		-| ['list_comprehension'] )
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'single_filter',1}}] )
	    -| ['compiler_generated'] )
	end
'record_extract'/1 =
    %% Line 359
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 360
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[Entry|_cor2]> when 'true' ->
				  ( case Entry of
				      ( <( {'test_record',_rec0,_cor8}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [_rec0|_cor6]
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_cor9> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','test_record'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(N)
		-| ['list_comprehension'] )
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'record_extract',1}}] )
	    -| ['compiler_generated'] )
	end
'function_param_lc'/2 =
    %% Line 363
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <P1,P2>
	      when call 'erlang':'is_list'
		    (P2) ->
	      %% Line 364
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[V|_cor3]> when 'true' ->
				  let <_cor5> =
				      apply 'lc$^0'/1
					  (_cor3)
				  in  ( [[P1|[V|[]]]|_cor5]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(P2)
		-| ['list_comprehension'] )
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'function_param_lc',2}}] )
	    -| ['compiler_generated'] )
	end
'sorted_gen'/1 =
    %% Line 367
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 368
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor13) ->
			    case _cor13 of
			      <[%% Line 369
				Entry|_cor2]> when 'true' ->
				  ( case Entry of
				      ( <( {'test_record',_rec3,_cor18}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor16> =
						%% Line 369
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [_rec3|_cor16]
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_cor19> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','test_record'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor13> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor13})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor11> =
			%% Line 369
			( fun (_cor8,_cor7) ->
			      %% Line 370
			      ( case _cor8 of
				  ( <( {'test_record',_rec1,_cor20}
				       -| ['compiler_generated'] )> when 'true' ->
					( case _cor7 of
					    ( <( {'test_record',_rec2,_cor22}
						 -| ['compiler_generated'] )> when 'true' ->
						  call 'erlang':'<'
						      (_rec1, _rec2)
					      -| ['compiler_generated'] )
					    ( <_cor23> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','test_record'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor21> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','test_record'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| [{'id',{0,0,'-sorted_gen/1-fun-0-'}}] )
		    in  let <_cor12> =
			    %% Line 369
			    call 'lists':'sort'
				(_cor11, %% Line 371
					 L)
			in  apply 'lc$^0'/1
				(_cor12)
		-| ['list_comprehension'] )
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'sorted_gen',1}}] )
	    -| ['compiler_generated'] )
	end
'make_n'/2 =
    %% Line 377
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <V,N>
	      when call 'erlang':'is_integer'
		    (N) ->
	      %% Line 378
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor5) ->
			    case _cor5 of
			      <[_cor9|_cor3]> when 'true' ->
				  let <_cor6> =
				      apply 'lc$^0'/1
					  (_cor3)
				  in  ( [V|_cor6]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor5> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor5})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor4> =
			call 'lists':'seq'
			    (1, N)
		    in  apply 'lc$^0'/1
			    (_cor4)
		-| ['list_comprehension'] )
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'make_n',2}}] )
	    -| ['compiler_generated'] )
	end
'intermediary_list'/1 =
    %% Line 381
    fun (_cor0) ->
	case _cor0 of
	  <Len>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <Inter> =
		  %% Line 382
		  apply 'random_test_records'/2
		      (Len, 50)
	      in  %% Line 383
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Entry|_cor3]> when 'true' ->
				      ( case Entry of
					  ( <( {'test_record',_cor9,_rec4}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor7> =
						    apply 'lc$^0'/1
							(_cor3)
						in  ( [_rec4|_cor7]
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_cor10> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','test_record'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Inter)
		    -| ['list_comprehension'] )
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'intermediary_list',1}}] )
	    -| ['compiler_generated'] )
	end
'intermediary_list2'/1 =
    %% Line 385
    fun (_cor0) ->
	case _cor0 of
	  <Len>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <Inter1> =
		  %% Line 386
		  apply 'random_test_records'/2
		      (Len, 50)
	      in  let <_cor8> =
		      %% Line 387
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[Entry|_cor3]> when 'true' ->
					  ( case Entry of
					      ( <( {'test_record',_cor16,_rec5}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <_cor7> =
							apply 'lc$^0'/1
							    (_cor3)
						    in  ( [_rec5|_cor7]
							  -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <_cor17> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','test_record'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor4> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor4})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Inter1)
			-| ['list_comprehension'] )
		  in  %% Line 388
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor12) ->
				    case _cor12 of
				      <[X|_cor11]> when 'true' ->
					  let <_cor13> =
					      call 'erlang':'*'
						  (X, X)
					  in  let <_cor14> =
						  apply 'lc$^1'/1
						      (_cor11)
					      in  ( [_cor13|_cor14]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor12> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor12})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(_cor8)
			-| ['list_comprehension'] )
	  ( <_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15})
		  -| [{'function_name',{'intermediary_list2',1}}] )
	    -| ['compiler_generated'] )
	end
'intermediary_list3'/1 =
    %% Line 390
    fun (_cor0) ->
	case _cor0 of
	  <Len>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <Inter1> =
		  %% Line 391
		  apply 'random_test_records'/2
		      (Len, 50)
	      in  let <_cor7> =
		      %% Line 392
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[Entry|_cor3]> when 'true' ->
					  let <_cor5> =
					      call 'random':'uniform'
						  (50)
					  in  let <_cor6> =
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [{_cor5,Entry}|_cor6]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor4> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor4})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Inter1)
			-| ['list_comprehension'] )
		  in  let <_cor14> =
			  %% Line 393
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor11) ->
					case _cor11 of
					  <[Entry|_cor10]> when 'true' ->
					      let <_cor12> =
						  call 'random':'uniform'
						      (100)
					      in  let <_cor13> =
						      apply 'lc$^1'/1
							  (_cor10)
						  in  ( [{_cor12,Entry}|_cor13]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor11> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor11})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^1'/1
				    (_cor7)
			    -| ['list_comprehension'] )
		      in  %% Line 394
			  ( letrec
				'lc$^2'/1 =
				    fun (_cor18) ->
					case _cor18 of
					  <[{A,{B,{'test_record',C,D}}}|_cor17]> when 'true' ->
					      let <_cor19> =
						  call 'erlang':'*'
						      (A, B)
					      in  let <_cor20> =
						      call 'erlang':'*'
							  (_cor19, C)
						  in  let <_cor21> =
							  call 'erlang':'*'
							      (_cor20, D)
						      in  let <_cor22> =
							      apply 'lc$^2'/1
								  (_cor17)
							  in  ( [_cor21|_cor22]
								-| ['compiler_generated'] )
					  ( <[_cor16|_cor17]> when 'true' ->
						apply 'lc$^2'/1
						    (_cor17)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor18> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor18})
						  -| [{'function_name',{'lc$^2',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^2'/1
				    (_cor14)
			    -| ['list_comprehension'] )
	  ( <_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23})
		  -| [{'function_name',{'intermediary_list3',1}}] )
	    -| ['compiler_generated'] )
	end
'nested_lc_gen'/1 =
    %% Line 400
    fun (_cor0) ->
	case _cor0 of
	  <Lst>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 401
	      ( letrec
		    'lc$^1'/1 =
			fun (_cor9) ->
			    case _cor9 of
			      <[%% Line 402
				Entry|_cor2]> when 'true' ->
				  let <_cor10> =
				      call 'erlang':'*'
					  (Entry, Entry)
				  in  let <_cor11> =
					  %% Line 402
					  apply 'lc$^1'/1
					      (_cor2)
				      in  ( [{'test_record',Entry,_cor10}|_cor11]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor9})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  let <_cor8> =
			%% Line 402
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[Val|_cor4]>
					    when %% Line 403
					      try
						  let <_cor5> =
						      call 'erlang':'rem'
							  (Val, 2)
						  in  call 'erlang':'=:='
							  (_cor5, 1)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    let <_cor7> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [Val|_cor7]
						  -| ['compiler_generated'] )
					( <[Val|_cor4]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Lst)
			  -| ['list_comprehension'] )
		    in  apply 'lc$^1'/1
			    (_cor8)
		-| ['list_comprehension'] )
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'nested_lc_gen',1}}] )
	    -| ['compiler_generated'] )
	end
'nested_lc_gen_opt'/1 =
    %% Line 405
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 406
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[Val|_cor2]>
				when try
				      let <_cor3> =
					  call 'erlang':'rem'
					      (Val, 2)
				      in  call 'erlang':'=:='
					      (_cor3, 1)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [Val|_cor5]
				      -| ['compiler_generated'] )
			    ( <[Val|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <Entries> =
		%% Line 406
		call 'lists':'reverse'
		    (_cor6)
	    in  %% Line 407
		apply 'nested_lc_gen_opt_helper'/2
		    (Entries, [])
'nested_lc_gen_opt_helper'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Entry|Entries],Res> when 'true' ->
	      let <_cor2> =
		  %% Line 409
		  call 'erlang':'*'
		      (Entry, Entry)
	      in  %% Line 409
		  apply 'nested_lc_gen_opt_helper'/2
		      (Entries, [{'test_record',Entry,_cor2}|Res])
	  %% Line 410
	  <[],Res> when 'true' ->
	      Res
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'nested_lc_gen_opt_helper',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    ( fun () ->
	  ( call ( 'erlang'
		   -| ['compiler_generated'] ):( 'get_module_info'
						 -| ['compiler_generated'] )
		(( 'lc_tests'
		   -| ['compiler_generated'] ))
	    -| ['compiler_generated'] )
      -| ['compiler_generated'] )
'module_info'/1 =
    ( fun (( _cor0
	     -| ['compiler_generated'] )) ->
	  ( call ( 'erlang'
		   -| ['compiler_generated'] ):( 'get_module_info'
						 -| ['compiler_generated'] )
		(( 'lc_tests'
		   -| ['compiler_generated'] ), ( _cor0
						  -| ['compiler_generated'] ))
	    -| ['compiler_generated'] )
      -| ['compiler_generated'] )
end