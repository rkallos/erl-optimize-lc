#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname make

main([]) ->
    {module, Mod} = code:load_abs("lc_tests/lc_tests"),
    io:format("Loaded ~p~n", [Mod]),

    % Generate tests
    Tests = lc_tests:all_tests(),
    io:format("Generated test data~n"),

    % Run all lc_tests tests
    io:format("Running lc_tests~n"),
    Lc = lc_tests:run_tests(Tests),

    % Run all lc_tests_opt tests
    {module, ModOpt} = code:load_abs("lc_tests_opt/lc_tests_opt"),
    io:format("Loaded ~p~n", [ModOpt]),
    io:format("Running lc_tests_opt~n"),
    Lco = lc_tests_opt:run_tests(Tests),

    % Verify correctness
    Matches = [{Name, Test} || {{Name,_,_,Res1}, {_,_,_,Res2}} <- lists:zip(Lc,Lco),
                               Test = Res1 =:= Res2],
    io:format("~p~n", [Matches]),
    case lists:all(fun({_,E}) -> E =:= true end, Matches) of
        true -> io:format("Tests succeeded. Results match.~n");
        _ -> io:format("Tests failed. Results do not match.~n")
    end,

    % Generate Gnuplot .dat files
    io:format("Generating .dat files~n"),
    generate_dat("lc_tests", Lc),
    generate_dat("lc_tests_opt", Lco),
    generate_dat("frees", Lc, Lco),
    generate_dat("comp_before", Lc, Lco),
    generate_dat("comp_after", Lc, Lco),
    generate_dat("all", Lc, Lco),
    
    % Create plots
    c:cd("./plots"),
    os:cmd("for file1 in *.gnu
do
    file2=\"${file1%.gnu}.svg\"
    gnuplot \"$file1\" > \"$file2\"
done"),
    c:cd("../");
main(_) ->
    usage().

usage() ->
    io:format("Make sure the compiler is present in lib, and that lc_tests/lc_tests.beam and lc_tests_opt/lc_tests_opt.beam are present.").

generate_dat(Filename, Data) ->
    {ok, File} = file:open("data/" ++ Filename ++ ".dat", [read,write]),
    io:fwrite(File, "~-20s~-20s~-20s~n", ["Test","Before","After"]),
    [io:fwrite(File, "~-20s~-20s~-20s~n", [Fun, integer_to_list(Before), integer_to_list(After)]) ||
        {Fun, _, {B, A}, _} <- Data,
        {total_heap_size,Before} <- B,
        {total_heap_size,After}  <- A
    ].

generate_dat("frees", Data1, Data2) ->
    {ok,File} = file:open("data/" ++ "frees.dat", [read,write]),
    io:fwrite(File, "~-20s~-20s~-20s~n", ["Test","BFrees","AFrees"]),
    [io:fwrite(File, "~-20s~-20s~-20s~n", [Fun, integer_to_list(Before), integer_to_list(After)]) ||
        {Fun, Before, After}
            <- lists:zipwith(
                 fun({F, BF, _, _},
                     {_G, AF, _, _}) ->
                         {F, BF, AF}
                 end, Data1, Data2)
    ];

generate_dat("comp_before", Data1, Data2) ->
    {ok, File} = file:open("data/" ++ "comp_before.dat", [read,write]),
    io:fwrite(File, "~-20s~-20s~-20s~n", ["Test","Before","BeforeOpt"]),
    [io:fwrite(File, "~-20s~-20s~-20s~n", [Fun, integer_to_list(Before), integer_to_list(BeforeOpt)]) ||
        {Fun, {B, Bo}}
            <- lists:zipwith(
                 fun({F, _, {B, _A}, _},
                     {_G, _, {Bo, _Ao}, _}) ->
                         {F, {B, Bo}}
                 end,
                 Data1,
                 Data2),
        {total_heap_size, Before} <- B,
        {total_heap_size, BeforeOpt} <- Bo
    ];
generate_dat("comp_after", Data1, Data2) ->
    {ok, File} = file:open("data/" ++ "comp_after.dat", [read,write]),
    io:fwrite(File, "~-20s~-20s~-20s~n", ["Test","After","AfterOpt"]),
    [io:fwrite(File, "~-20s~-20s~-20s~n", [Fun, integer_to_list(After), integer_to_list(AfterOpt)]) ||
        {Fun, {A, Ao}}
            <- lists:zipwith(
                 fun({F, _, {_B, A}, _},
                     {_G, _, {_Bo, Ao}, _}) ->
                         {F, {A, Ao}}
                 end,
                 Data1,
                 Data2),
        {total_heap_size, After} <- A,
        {total_heap_size, AfterOpt} <- Ao
    ];
generate_dat("all", Data1, Data2) ->
    {ok, File} = file:open("data/" ++ "all.dat", [read,write]),
    io:fwrite(File, "~-20s~-20s~-20s~-20s~-20s~-20s~-20s~n",
              ["Test","Before","After","BeforeOpt","AfterOpt","Frees","FreesOpt"]),
    [io:fwrite(File, "~-20s~-20s~-20s~-20s~-20s~-20s~-20s~n",
               [Fun, integer_to_list(Before), integer_to_list(After),
                integer_to_list(BeforeOpt), integer_to_list(AfterOpt),
               integer_to_list(Frees), integer_to_list(FreesOpt)]) ||
        {Fun, {B, A, Bo, Ao, Frees, FreesOpt}}
            <- lists:zipwith(
                 fun({F, BF, {B, A}, _},
                     {_G, AF, {Bo, Ao}, _}) ->
                         {F, {B, A, Bo, Ao, BF, AF}}
                 end,
                 Data1,
                 Data2),
        {total_heap_size, Before} <- B,
        {total_heap_size, BeforeOpt} <- Bo,
        {total_heap_size, After} <- A,
        {total_heap_size, AfterOpt} <- Ao
].
